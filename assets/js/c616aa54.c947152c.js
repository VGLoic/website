"use strict";(self.webpackChunk_semaphore_protocol_website=self.webpackChunk_semaphore_protocol_website||[]).push([[725],{3905:function(e,o,t){t.d(o,{Zo:function(){return f},kt:function(){return u}});var r=t(7294);function a(e,o,t){return o in e?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t,e}function n(e,o){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);o&&(r=r.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var o=1;o<arguments.length;o++){var t=null!=arguments[o]?arguments[o]:{};o%2?n(Object(t),!0).forEach((function(o){a(e,o,t[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))}))}return e}function l(e,o){if(null==e)return{};var t,r,a=function(e,o){if(null==e)return{};var t,r,a={},n=Object.keys(e);for(r=0;r<n.length;r++)t=n[r],o.indexOf(t)>=0||(a[t]=e[t]);return a}(e,o);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)t=n[r],o.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var o=r.useContext(p),t=o;return e&&(t="function"==typeof e?e(o):i(i({},o),e)),t},f=function(e){var o=s(e.components);return r.createElement(p.Provider,{value:o},e.children)},m={inlineCode:"code",wrapper:function(e){var o=e.children;return r.createElement(r.Fragment,{},o)}},h=r.forwardRef((function(e,o){var t=e.components,a=e.mdxType,n=e.originalType,p=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),h=s(t),u=a,c=h["".concat(p,".").concat(u)]||h[u]||m[u]||n;return t?r.createElement(c,i(i({ref:o},f),{},{components:t})):r.createElement(c,i({ref:o},f))}));function u(e,o){var t=arguments,a=o&&o.mdxType;if("string"==typeof e||a){var n=t.length,i=new Array(n);i[0]=h;var l={};for(var p in o)hasOwnProperty.call(o,p)&&(l[p]=o[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<n;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},6654:function(e,o,t){t.r(o),t.d(o,{contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return f}});var r=t(3117),a=t(102),n=(t(7294),t(3905)),i=["components"],l={sidebar_position:3,title:"Proofs"},p="Semaphore proofs",s={unversionedId:"guides/proofs",id:"version-V2/guides/proofs",title:"Proofs",description:"Learn how to use Semaphore to generate and verify zero-knowledge proofs.",source:"@site/versioned_docs/version-V2/guides/proofs.md",sourceDirName:"guides",slug:"/guides/proofs",permalink:"/docs/guides/proofs",editUrl:"https://github.com/semaphore-protocol/website/edit/main/versioned_docs/version-V2/guides/proofs.md",tags:[],version:"V2",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Proofs"},sidebar:"version-V2/mySidebar",previous:{title:"Groups",permalink:"/docs/guides/groups"},next:{title:"Circuits",permalink:"/docs/technical-reference/circuits"}},f=[{value:"Broadcast anonymous signals",id:"broadcast-anonymous-signals",children:[],level:2},{value:"Generate a proof off-chain",id:"generate-a-proof-off-chain",children:[],level:2},{value:"Verify a proof off-chain",id:"verify-a-proof-off-chain",children:[],level:2},{value:"Verify a proof on-chain",id:"verify-a-proof-on-chain",children:[{value:"Generate a Solidity-compatible proof",id:"generate-a-solidity-compatible-proof",children:[],level:3},{value:"Retrieve a nullifier hash",id:"retrieve-a-nullifier-hash",children:[],level:3}],level:2}],m={toc:f};function h(e){var o=e.components,t=(0,a.Z)(e,i);return(0,n.kt)("wrapper",(0,r.Z)({},m,t,{components:o,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"semaphore-proofs"},"Semaphore proofs"),(0,n.kt)("p",null,"Learn how to use Semaphore to generate and verify zero-knowledge proofs."),(0,n.kt)("h2",{id:"broadcast-anonymous-signals"},"Broadcast anonymous signals"),(0,n.kt)("p",null,"Once a user joins their ",(0,n.kt)("a",{parentName:"p",href:"/docs/glossary#semaphore-identity"},"Semaphore identity")," to a ",(0,n.kt)("a",{parentName:"p",href:"/docs/glossary#semaphore-group"},"Semaphore group"),", the user can signal anonymously with a zero-knowledge proof that proves the following:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The user is a member of the group."),(0,n.kt)("li",{parentName:"ul"},"The same user created the signal and the proof.")),(0,n.kt)("p",null,"Developers can use Semaphore for the following:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#generate-a-proof-off-chain"},(0,n.kt)("strong",{parentName:"a"},"Generate a proof off-chain"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#verify-a-proof-off-chain"},(0,n.kt)("strong",{parentName:"a"},"Verify a proof off-chain"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#verify-a-proof-on-chain"},(0,n.kt)("strong",{parentName:"a"},"Verify a proof on-chain")))),(0,n.kt)("h2",{id:"generate-a-proof-off-chain"},"Generate a proof off-chain"),(0,n.kt)("p",null,"Use the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore.js/tree/main/packages/proof"},(0,n.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/proof"))," library to generate an off-chain proof.\nTo generate a proof, pass the following properties to the ",(0,n.kt)("inlineCode",{parentName:"p"},"generateProof")," function:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"identity"),": The Semaphore identity of the user broadcasting the signal and generating the proof."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"group"),": The group to which the user belongs."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"externalNullifier"),": The value that prevents double-signaling."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"signal"),": The signal the user wants to send anonymously."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"snarkArtifacts"),": The ",(0,n.kt)("inlineCode",{parentName:"li"},"zkey")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"wasm")," ",(0,n.kt)("a",{parentName:"li",href:"/docs/glossary/#trusted-setup-files"},"trusted setup files"),".")),(0,n.kt)("p",null,"In the voting system use case, once all the voters have joined their ",(0,n.kt)("a",{parentName:"p",href:"/docs/guides/identities#create-an-identity"},"identities")," to the ballot ",(0,n.kt)("a",{parentName:"p",href:"/docs/guides/groups"},"group"),",\na voter can generate a proof to vote for a proposal.\nIn the call to ",(0,n.kt)("inlineCode",{parentName:"p"},"generateProof"),", the voting system passes the unique ballot ID (the ",(0,n.kt)("a",{parentName:"p",href:"/docs/glossary/#merkle-tree/"},"Merkle tree")," root of the group) as the\n",(0,n.kt)("inlineCode",{parentName:"p"},"externalNullifier")," to prevent the voter signaling more than once for the ballot.\nThe following code sample shows how to use ",(0,n.kt)("inlineCode",{parentName:"p"},"generateProof")," to generate the voting proof:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { generateProof } from "@semaphore-protocol/proof"\n\nconst externalNullifier = group.root\nconst signal = "proposal_1"\n\nconst fullProof = await generateProof(identity, group, externalNullifier, signal, {\n    zkeyFilePath: "./semaphore.zkey",\n    wasmFilePath: "./semaphore.wasm"\n})\n')),(0,n.kt)("h2",{id:"verify-a-proof-off-chain"},"Verify a proof off-chain"),(0,n.kt)("p",null,"Use the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore.js/tree/main/packages/proof"},(0,n.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/proof"))," library to verify a Semaphore proof off-chain.\nTo verify a proof, pass the following to the ",(0,n.kt)("inlineCode",{parentName:"p"},"verifyProof")," function:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"em"},"proof")),": the Semaphore proof."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"em"},"verificationKey")),": the JavaScript object in the ",(0,n.kt)("inlineCode",{parentName:"li"},"semaphore.json")," ",(0,n.kt)("a",{parentName:"li",href:"/docs/glossary/#trusted-setup-files"},"trusted setup file"),".")),(0,n.kt)("p",null,"The following code sample shows how to parse the verification key object from ",(0,n.kt)("inlineCode",{parentName:"p"},"semaphore.json"),"\nand verify the previously generated proof:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { verifyProof } from "@semaphore-protocol/proof"\n\nconst verificationKey = JSON.parse(fs.readFileSync("./semaphore.json", "utf-8"))\n\nawait verifyProof(verificationKey, fullProof) // true or false.\n')),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"verifyProof")," returns a Promise that resolves to ",(0,n.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,n.kt)("h2",{id:"verify-a-proof-on-chain"},"Verify a proof on-chain"),(0,n.kt)("p",null,"Use the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/contracts/base/SemaphoreCore.sol"},(0,n.kt)("inlineCode",{parentName:"a"},"SemaphoreCore.sol"))," contract to verify proofs on-chain.\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/contracts/base/SemaphoreCore.sol"},(0,n.kt)("inlineCode",{parentName:"a"},"SemaphoreCore.sol"))," uses a verifier deployed to Ethereum and provides methods to verify a proof and save the ",(0,n.kt)("inlineCode",{parentName:"p"},"nullifierHash")," to avoid double-signaling."),(0,n.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"You can import ",(0,n.kt)("inlineCode",{parentName:"p"},"SemaphoreCore.sol")," and other Semaphore contracts from the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/contracts"},(0,n.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/contracts"))," NPM module."))),(0,n.kt)("p",null,"To verify Semaphore proofs in your contract, import ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/blob/main/contracts/base/SemaphoreCore.sol"},(0,n.kt)("inlineCode",{parentName:"a"},"SemaphoreCore.sol"))," and pass the following to the ",(0,n.kt)("inlineCode",{parentName:"p"},"_verifyProof")," internal method:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"em"},"signal")),": The Semaphore signal to prove."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"em"},"root")),": The root of the Merkle tree."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"em"},"nullifierHash")),": a ",(0,n.kt)("a",{parentName:"li",href:"#retrieve-a-nullifier-hash"},"nullifier hash"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"em"},"externalNullifier")),": The external nullifier."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"em"},"proof")),": A ",(0,n.kt)("a",{parentName:"li",href:"#generate-a-solidity-compatible-proof"},(0,n.kt)("em",{parentName:"a"},"Solidity-compatible")," Semaphore proof"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"em"},"verifier")),": The verifier address.")),(0,n.kt)("p",null,"The following code sample shows how the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/blob/main/contracts/Semaphore.sol"},(0,n.kt)("inlineCode",{parentName:"a"},"Semaphore.sol"))," contract uses ",(0,n.kt)("inlineCode",{parentName:"p"},"SemaphoreCore")," to verify the proof:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sol"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport "./interfaces/ISemaphore.sol";\nimport "./base/SemaphoreCore.sol";\nimport "./base/SemaphoreGroups.sol";\n\n/// @title Semaphore\ncontract Semaphore is ISemaphore, SemaphoreCore, SemaphoreGroups {\n\n    ...\n\n    function verifyProof(\n        uint256 groupId,\n        bytes32 signal,\n        uint256 nullifierHash,\n        uint256 externalNullifier,\n        uint256[8] calldata proof\n    ) external override {\n        uint256 root = getRoot(groupId);\n        uint8 depth = getDepth(groupId);\n\n        require(depth != 0, "Semaphore: group does not exist");\n\n        IVerifier verifier = verifiers[depth];\n\n        _verifyProof(signal, root, nullifierHash, externalNullifier, proof, verifier);\n\n        _saveNullifierHash(nullifierHash);\n\n        emit ProofVerified(groupId, signal);\n    }\n\n    ...\n}\n')),(0,n.kt)("h3",{id:"generate-a-solidity-compatible-proof"},"Generate a Solidity-compatible proof"),(0,n.kt)("p",null,"To transform a proof to be compatible with Solidity contracts, pass the proof to the ",(0,n.kt)("inlineCode",{parentName:"p"},"packToSolidityProof")," utility function--for example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { packToSolidityProof } from "@semaphore-protocol/proof"\n\nconst solidityProof = packToSolidityProof(fullProof.proof)\n')),(0,n.kt)("p",null,"Semaphore returns a new Solidity-compatible instance of the proof."),(0,n.kt)("h3",{id:"retrieve-a-nullifier-hash"},"Retrieve a nullifier hash"),(0,n.kt)("p",null,"To get the Semaphore proof nullifier hash, access the proof's ",(0,n.kt)("inlineCode",{parentName:"p"},"publicSignals.nullifierHash")," property--for example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const { nullifierHash } = fullProof.publicSignals\n")))}h.isMDXComponent=!0}}]);